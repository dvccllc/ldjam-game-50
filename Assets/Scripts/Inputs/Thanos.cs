//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Inputs/Thanos.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Thanos : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Thanos()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Thanos"",
    ""maps"": [
        {
            ""name"": ""Hand"",
            ""id"": ""ef069b70-f13a-4c20-b9de-be69a001d641"",
            ""actions"": [
                {
                    ""name"": ""PointerFinger"",
                    ""type"": ""Value"",
                    ""id"": ""def63991-c0cf-44de-b7d5-23f6076d3bd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MiddleFinger"",
                    ""type"": ""Value"",
                    ""id"": ""6ae39957-87a1-4771-97d9-0e2cd722147c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RingFinger"",
                    ""type"": ""Value"",
                    ""id"": ""8e2b8a35-b7aa-4651-904c-4d98c2ace116"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinky"",
                    ""type"": ""Value"",
                    ""id"": ""88604ef7-ed04-403b-9c57-01435f1a235a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Thumb"",
                    ""type"": ""Value"",
                    ""id"": ""8e972e8e-ae80-412b-8e01-f1a4f3781609"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""50e3aeb6-2138-4de9-89be-970f64a9a7c1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerFinger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e29afc0-b942-4d0c-ad25-a7855c20b9d6"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerFinger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f398c93-0235-4155-b312-541557323261"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MiddleFinger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5029023b-d45d-4988-b5f3-94957e89f16e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MiddleFinger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e19ee997-eb63-455f-b6af-273c4620b9ac"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RingFinger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93eb427d-2117-49cf-b93b-bd5683107ceb"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RingFinger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45e35a2f-9a4e-449c-91f2-96e06b673b1e"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinky"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01000ec2-d1c3-422b-9c99-17de28826933"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinky"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73adcdaa-5577-4e9a-be18-44823dfe0af9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thumb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edbb303a-c0b5-494f-8448-36c7a1f6be0a"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thumb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Hand
        m_Hand = asset.FindActionMap("Hand", throwIfNotFound: true);
        m_Hand_PointerFinger = m_Hand.FindAction("PointerFinger", throwIfNotFound: true);
        m_Hand_MiddleFinger = m_Hand.FindAction("MiddleFinger", throwIfNotFound: true);
        m_Hand_RingFinger = m_Hand.FindAction("RingFinger", throwIfNotFound: true);
        m_Hand_Pinky = m_Hand.FindAction("Pinky", throwIfNotFound: true);
        m_Hand_Thumb = m_Hand.FindAction("Thumb", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hand
    private readonly InputActionMap m_Hand;
    private IHandActions m_HandActionsCallbackInterface;
    private readonly InputAction m_Hand_PointerFinger;
    private readonly InputAction m_Hand_MiddleFinger;
    private readonly InputAction m_Hand_RingFinger;
    private readonly InputAction m_Hand_Pinky;
    private readonly InputAction m_Hand_Thumb;
    public struct HandActions
    {
        private @Thanos m_Wrapper;
        public HandActions(@Thanos wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerFinger => m_Wrapper.m_Hand_PointerFinger;
        public InputAction @MiddleFinger => m_Wrapper.m_Hand_MiddleFinger;
        public InputAction @RingFinger => m_Wrapper.m_Hand_RingFinger;
        public InputAction @Pinky => m_Wrapper.m_Hand_Pinky;
        public InputAction @Thumb => m_Wrapper.m_Hand_Thumb;
        public InputActionMap Get() { return m_Wrapper.m_Hand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HandActions set) { return set.Get(); }
        public void SetCallbacks(IHandActions instance)
        {
            if (m_Wrapper.m_HandActionsCallbackInterface != null)
            {
                @PointerFinger.started -= m_Wrapper.m_HandActionsCallbackInterface.OnPointerFinger;
                @PointerFinger.performed -= m_Wrapper.m_HandActionsCallbackInterface.OnPointerFinger;
                @PointerFinger.canceled -= m_Wrapper.m_HandActionsCallbackInterface.OnPointerFinger;
                @MiddleFinger.started -= m_Wrapper.m_HandActionsCallbackInterface.OnMiddleFinger;
                @MiddleFinger.performed -= m_Wrapper.m_HandActionsCallbackInterface.OnMiddleFinger;
                @MiddleFinger.canceled -= m_Wrapper.m_HandActionsCallbackInterface.OnMiddleFinger;
                @RingFinger.started -= m_Wrapper.m_HandActionsCallbackInterface.OnRingFinger;
                @RingFinger.performed -= m_Wrapper.m_HandActionsCallbackInterface.OnRingFinger;
                @RingFinger.canceled -= m_Wrapper.m_HandActionsCallbackInterface.OnRingFinger;
                @Pinky.started -= m_Wrapper.m_HandActionsCallbackInterface.OnPinky;
                @Pinky.performed -= m_Wrapper.m_HandActionsCallbackInterface.OnPinky;
                @Pinky.canceled -= m_Wrapper.m_HandActionsCallbackInterface.OnPinky;
                @Thumb.started -= m_Wrapper.m_HandActionsCallbackInterface.OnThumb;
                @Thumb.performed -= m_Wrapper.m_HandActionsCallbackInterface.OnThumb;
                @Thumb.canceled -= m_Wrapper.m_HandActionsCallbackInterface.OnThumb;
            }
            m_Wrapper.m_HandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PointerFinger.started += instance.OnPointerFinger;
                @PointerFinger.performed += instance.OnPointerFinger;
                @PointerFinger.canceled += instance.OnPointerFinger;
                @MiddleFinger.started += instance.OnMiddleFinger;
                @MiddleFinger.performed += instance.OnMiddleFinger;
                @MiddleFinger.canceled += instance.OnMiddleFinger;
                @RingFinger.started += instance.OnRingFinger;
                @RingFinger.performed += instance.OnRingFinger;
                @RingFinger.canceled += instance.OnRingFinger;
                @Pinky.started += instance.OnPinky;
                @Pinky.performed += instance.OnPinky;
                @Pinky.canceled += instance.OnPinky;
                @Thumb.started += instance.OnThumb;
                @Thumb.performed += instance.OnThumb;
                @Thumb.canceled += instance.OnThumb;
            }
        }
    }
    public HandActions @Hand => new HandActions(this);
    public interface IHandActions
    {
        void OnPointerFinger(InputAction.CallbackContext context);
        void OnMiddleFinger(InputAction.CallbackContext context);
        void OnRingFinger(InputAction.CallbackContext context);
        void OnPinky(InputAction.CallbackContext context);
        void OnThumb(InputAction.CallbackContext context);
    }
}
